
# Diffie-Hellman Protocol Explanation:
# ------------------------------------
# The Diffie-Hellman (DH) key exchange protocol relies on the assumption that
# computing the discrete logarithm (given g^a mod p, find a) is computationally hard.
# This ensures the security of the protocol.

# Step 1: Publicly agree on a large prime p and a generator g of the finite field F_p*.
# The prime p is often a safe prime (p = 2*q + 1, where q is also a prime) to protect
# against efficient discrete log attacks like the Pohlig-Hellman algorithm.

# Step 2: Each party selects a secret integer a (the private key) less than p - 1
# and computes their public key A = g^a mod p, which can be shared over an insecure network.

# Given NIST parameters for the Diffie-Hellman protocol
# Given parameters
g = 2  # Generator
p = int(
    "241031242692103258855207602219756607485695054850245994265411694195810883168261222889009385826134161467"
    "322714147790401219650364895705058263194273070680500922306273474534107340669624601458936165977404102716"
    "924945320037872943417032584377865919814376319377685986952408894019557734611984354530154704374720774996"
    "976375008430892633929555996888245787241299381012913029459299994792636526405928464720973038494721168143"
    "4464714438488520940127459844288859336526896320919633919"
)
a = int(
    "972107443837033796245864316200458246846904598488981605856765890478853088246897345487328491037710219222"
    "038930943365848626194109830309179393018216763327572120124760140018038673999837643377590434413866611132"
    "403979547150659053897355593394492586978400044375465657296027592948349589216415363722668361328689588996"
    "541370097559090335137676411595949335857341797148926151694299575970292809805314431447043469447485957669"
    "949989090202320234337890323293401862304986599884732815"
)

# Compute A = g^a mod p
A = pow(g, a, p)  # Python's built-in modular exponentiation
print(A)
